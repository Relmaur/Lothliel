@use "sass:math";

$grid-columns: 12;

$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
  "4": 40px,
  "5": 50px,
);

$justify-values: flex-start, flex-end, center, space-between, space-around,
  space-evenly;
$align-values: flex-start, flex-end, center, stretch, baseline;

// base layout classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto; // top, bottom: 0 | left, right: auto
  padding: 0 20px;
  box-sizing: border-box;
}

.row {
  display: flex;
  flex-flow: row wrap;
}

// grid gaps

// row level gaps (declared directly on the row element, this applies the styling below to every col element of a specific row element.)
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    // to target ANY direct descendants of row
    padding: $val;
  }

  // To only space the col elements between them (without modifying the outermost left and outermost right sides of the row.
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}

// justify content classes
@each $val in $justify-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}
@each $val in $align-values {
  .align-#{$val} {
    align-items: $val;
  }
}

// Alternative mixin for avoiding code repetition on the col rules.
@mixin size($prefix) {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-#{$prefix} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

// col classes

// With mixin (avoiding code repetition)

@include xs {
  @include size(xs);
}
@include sm {
  @include size(sm);
}
@include md {
  @include size(md);
}
@include lg {
  @include size(lg);
}
@include xl {
  @include size(xl);
}
@include xxl {
  @include size(xxl);
}

// Without mixin (plenty of code repeated)

// @include xs {
//     @for $i from 1 through $grid-columns {
//         .col-#{$i}-xs {
//             box-sizing: border-box;
//             flex-grow: 0;
//             width: math.div($i * 100%, $grid-columns)
//         }
//     }
// }
// @include sm {
//     @for $i from 1 through $grid-columns {
//         .col-#{$i}-sm {
//             box-sizing: border-box;
//             flex-grow: 0;
//             width: math.div($i * 100%, $grid-columns)
//         }
//     }
// }
// @include md {
//     @for $i from 1 through $grid-columns {
//         .col-#{$i}-md {
//             box-sizing: border-box;
//             flex-grow: 0;
//             width: math.div($i * 100%, $grid-columns)
//         }
//     }
// }
// @include lg {
//     @for $i from 1 through $grid-columns {
//         .col-#{$i}-lg {
//             box-sizing: border-box;
//             flex-grow: 0;
//             width: math.div($i * 100%, $grid-columns)
//         }
//     }
// }
// @include xl {
//     @for $i from 1 through $grid-columns {
//         .col-#{$i}-xl {
//             box-sizing: border-box;
//             flex-grow: 0;
//             width: math.div($i * 100%, $grid-columns)
//         }
//     }
// }
// @include xxl {
//     @for $i from 1 through $grid-columns {
//         .col-#{$i}-xxl {
//             box-sizing: border-box;
//             flex-grow: 0;
//             width: math.div($i * 100%, $grid-columns)
//         }
//     }
// }
